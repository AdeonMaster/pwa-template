import groovy.json.JsonSlurperClassic 

@NonCPS
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}

def getGitBranches(accessToken, owner, repo) {
    return jsonParse(sh(script: "curl -H 'Authorization: token ${accessToken}' https://api.github.com/repos/${owner}/${repo}/branches", returnStdout: true))
}

def createGitRelease(accessToken, owner, repo, tagName, targetCommitish, name, body, draft = false, prerelease = false) {
    return jsonParse(sh(script: "curl -H 'Authorization: token ${accessToken}' -d '{ \"tag_name\": \"${tagName}\", \"target_commitish\": \"${targetCommitish}\", \"name\": \"${name}\", \"body\": \"${body}\", \"draft\": ${draft}, \"prerelease\": ${prerelease} }' https://api.github.com/repos/${owner}/${repo}/releases", returnStdout: true))
}

def uploadGitReleaseAsset(accessToken, owner, repo, releaseId, fileName) {
    return jsonParse(sh(script: "curl -H 'Authorization: token ${accessToken}' -H 'Content-Type: application/octet-stream' --data-binary @'${fileName}' https://uploads.github.com/repos/${owner}/${repo}/releases/${releaseId}/assets?name=${fileName}", returnStdout: true))
}

pipeline {
    agent any
    
    tools {nodejs "nodejs-14.11.0"}
    
    environment {
        GIT_ACCESS_TOKEN = 'YOUR-TOKEN-HERE'
        GIT_OWNER = 'AdeonMaster'
        GIT_REPO = 'pwa-template'
    }
  
    stages {
        stage('Input') {
            steps {
                script {
                    def branches = getGitBranches(env.GIT_ACCESS_TOKEN, env.GIT_OWNER, env.GIT_REPO)
                    
                    // there is an error
                    if (branches instanceof HashMap) {
                        currentBuild.result = 'ABORTED'
                        error('Error while receiving branch list. '+branches.message)
                    }
                    
                    env.TARGET_BRANCH = input message: 'Please, select target branch to make a release from', ok: 'Select', parameters: [choice(name: 'Branch', choices: (branches.collect {branch -> return branch.name}))]
                    env.TARGET_VERSION = input message: 'Please, select target version', ok: 'Select', parameters: [choice(name: 'Version', choices: 'patch\nminor\nmajor')]
                }
            }
        }
       
        stage('Git Checkout') {
            steps {
                sh 'rm -rf *'
                sh 'git clone git@github.com:${GIT_OWNER}/${GIT_REPO}.git'
                dir("${GIT_REPO}") {
                    sh 'git checkout ${TARGET_BRANCH}'
                }
            }
        }
        
        stage('Install') {
            steps {
                dir("${GIT_REPO}") {
                    sh '''
                        if [ -f "package-lock.json" ]; then
                            npm ci
                        else 
                            npm install
                        fi
                    '''
                }
            }
        }  
        
        stage('Run tests') {
            steps {
                dir("${GIT_REPO}") {
                    sh 'npm run eslint'
                    sh 'npm run jest'
                }
            }
        }

        stage('Update version') {
            steps {
                dir("${GIT_REPO}") {
                    sh 'npm version ${TARGET_VERSION}'
                }
            }
        }
      
        stage('Build') {
            steps {
                dir("${GIT_REPO}") {
                    sh 'npm run build'
                }
            }
        }

        stage('Release') {
            steps {
                dir("${GIT_REPO}") {
                    sh 'git push --set-upstream origin ${TARGET_BRANCH} --tags'
                    sh 'git push --set-upstream origin ${TARGET_BRANCH}'
                    sh 'zip -r dist.zip dist/'
                    script {
                        def version = sh(script: "node -p \"require('./package.json').version\"", returnStdout: true).replaceAll("\\s","")
                        def release = createGitRelease(env.GIT_ACCESS_TOKEN, env.GIT_OWNER, env.GIT_REPO, version, env.TARGET_BRANCH, version, "Release of ${version}")

                        uploadGitReleaseAsset(env.GIT_ACCESS_TOKEN, env.GIT_OWNER, env.GIT_REPO, release.id, "dist.zip")
                    }
                }
            }
        }
    }
}